plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.5'
    id 'io.spring.dependency-management' version '1.1.7'
    id 'jacoco'
}

group = 'com.jandi'
version = '0.0.1-SNAPSHOT'

bootJar {
    archiveFileName = 'band_backend-0.0.1-SNAPSHOT.jar'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

compileJava {
    options.compilerArgs << '-parameters'
}

compileTestJava {
    options.compilerArgs << '-parameters'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'

    implementation 'org.springframework.boot:spring-boot-starter-logging'
    
    // Logstash encoder for structured JSON logging
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'

    // Prometheus & Grafana 모니터링
    implementation 'io.micrometer:micrometer-registry-prometheus'
    implementation 'io.micrometer:micrometer-core'
    // Prometheus exposition formats 추가 (Spring Boot 3.4.5 호환성을 위해)
    implementation 'io.prometheus:prometheus-metrics-exposition-formats'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    
    // TestContainers for integration testing
    testImplementation 'org.testcontainers:junit-jupiter:1.19.8'
    testImplementation 'org.testcontainers:mysql:1.19.8'
    testImplementation 'org.testcontainers:elasticsearch:1.19.8'
    testImplementation 'org.springframework.boot:spring-boot-testcontainers'
    
    // MockWebServer for external API testing
    testImplementation 'com.squareup.okhttp3:mockwebserver:4.12.0'
    
    // AssertJ for better assertions
    testImplementation 'org.assertj:assertj-core'
    
    // H2 Database for testing
    testImplementation 'com.h2database:h2'

    // JWT
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

    // Redis
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'

    // AWS SDK
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.261'

    // Swagger/OpenAPI
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'

    // Redis
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
}

tasks.named('test') {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

// JaCoCo 테스트 커버리지
jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/*Application*',
                '**/*Config*',
                '**/dto/**',
                '**/entity/**',
                '**/exception/**',
                '**/constant/**'
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                minimum = 0.70 // 70% 커버리지 목표
            }
        }
    }
}

// 테스트 환경별 설정
test {
    systemProperty 'spring.profiles.active', 'test'
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

springBoot {
    mainClass = 'com.jandi.band_backend.JandiBandBackendApplication'
}